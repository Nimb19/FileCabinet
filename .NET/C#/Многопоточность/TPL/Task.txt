System.Threading.Tasks.Task
https://learn.microsoft.com/ru-ru/dotnet/api/system.threading.tasks.taskcreationoptions?view=net-6.0#system-threading-tasks-taskcreationoptions-attachedtoparent


! Если задача будет присоединена (AttachedToParent), то:
	1. Родительский объект станет ожидать завершения дочерней/всех дочерних.
	2. Родительский объект станет выбрасывать то же исключение, которое было создано дочерней.
	3. Состояние (отменена или нет) родительского объекта зависит от состояния дочернего/дочерних.

	В большинстве случаев нужно использовать отсоединённые дочерние задачи, поскольку их связи с другими задачами менее сложные, обычно это не надо. 
	Поэтому по умолчанию задачи отсоединены, то есть не зависят никак от результатов/синхронизации/работы друг друга, 
	если это логически не задать явно вызвав .Result или ожидая завершение дочерней.

	Основной посыл - все родительские задачи ждут завершение их присоединённых дочерних, по умолчанию это никогда не нужно.

	!! Это значит, что, по умолчанию, если основной поток завершится, то автоматически завершаться и отсоединённые по умолчанию дочерние.
	   Если они будут присоединены явно, то родительская задача будет жить и ожидать завершение дочерней.

	! Родительская задача явно может указать что не примет присоединение дочерних, даже если они будут созданы с флагом присоединения 

	! Присоединены могут быть сколько угодно дочерних задач

TaskCreationOptions
0. None - поведение по умолчанию
1. PreferFairness - рекомендация для TaskScheduler, что бы тот старался выполнить Task более менее по его порядку запуска, относительно других задач
2. LongRunning - указание для TaskScheduler, что поток не очень оптимальный и очень долгий (больше 500мс идёт), 
   что бы тот создал если надо ещё один поток, а не ждал этого, например. Следует ожидать избыточной подписки.
   Подсказывает планировщику, что этой долгой задаче может потребоваться ещё одна задача, что бы были какие то лишние свободные потоки.
   + достаточно быстро запускает задачу, судя по описанию.
4. 