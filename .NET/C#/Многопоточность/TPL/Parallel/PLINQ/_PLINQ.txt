Parallel Linq
https://learn.microsoft.com/ru-ru/dotnet/standard/parallel-programming/introduction-to-plinq

Особенности: 
1. https://stackoverflow.com/questions/37133104/performances-of-plinq-vs-tpl
И PLINQ и Parallel в первую очередь создавались для рабочих нагрузок, поэтому там присутствует высокая степень оптимизации, 
которая, на маленьких объёмах данных, может только мешать процессу (например обычные потоки ввода/вывода значения в WriteLine).

Поэтому на больших коллекциях/больших кусках кода в потоках - выгоднее будет использовать подобное распараллеливание. 
Хотя это не доказано и по большому счёт нужно профилировать приложение, измерять что будет использовать выгоднее.

Расширения:
1. AsParallel - для обычного Linq. Точка входа PLINQ, указывает на параллелизацию остального запроса
2. AsSequential - указывает, что последующая часть запроса должна выполниться синхронно
3. AsOrdered - сохранить ли порядок коллекции до конца запроса PLINQ, если конечно не будет вызвана OrderBy
4. AsUnordered (по умолчанию) - можно не сохранять порядок исходной последовательности. 
   Например, если упорядочивание было включено для каких то запросов, для оптимизации можно далее это отключить
5. WithCancellation - указывает на то что надо иногда чекать токен и отменить если что запрос
6. WithDegreeOfParallelism - максимальное кол-во процессоров, которое PLINQ должен использовать для оптимизации запроса
7. WithMergeOptions - позволяет указать опции для объединения результатов в одну последовательность
8. WithExecutionMode - указывает должен ли PLIQ параллелизоввать запрос

9. ForAll - многопоточное перечисление, обрабатывается параллельно
10. Aggregate - перегрузка от PLINQ, позволяющая объединеить какие-то результаты, сделав это параллельно