1. record (immutable) class/struct - неизменяемые классы, которые заполняют свои значения в конструкторе и дальше ток читаются.
   https://metanit.com/sharp/tutorial/3.51.php
   Но работает неизменяемость только для свойств, у которых вместо set; - init, к примеру.
   Они могут быть абстрактными, их можно наследовать, а можно добавить sealed.

   Есть не только визуальные, но и логические изменения:
   a) Автоматически генерируемая проверка на равенство по значениям (Equals())
   b) Автоматом реализованы проверки на равенство операторами == и != (так же по значению)
   c) Копирование с помощью ключ. слова with (person2 = person1 with { // ставим значения свойствам, которые хотим поменять (можно оставить пустые) \\ })
   d) Деконструктор var (personName, personAge) = person;
   e) Удобный автоконструктор, не надо прописывать его конкретно вместе со свойствами. Прям в определении скобки с названиями свойств. 
      Удобно, читабельно. Можно совмещать с явно указываемыми свойствами.
      public record Person(string Name, int Age)
      {
          public string Company { get; set; } = "";
      }
      Или
      public record Person(string Name, int Age);
    f) Для структур иммутабельность не работает автоматом. Там надо добавить ключ. слово readonly, сто бы иммутабельность работала
    public readonly record struct Person(string Name, int Age);
    g) Автогенерируемое ToString() -> Console.WriteLine(person); // Person {Name = Tom, Age = 37}
       Что так же поможет сравнивать по значению.

   Как и обычные классы, могут наследоваться и даже от таких же Records.
   ! Отличие только в автогенерируемом коде и доп. сахаре.