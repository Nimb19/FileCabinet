Фабричный метод. Порождающий паттерн.
https://www.youtube.com/watch?v=fudZFG-Cm0Y

Суть в том, что мы создаём классы фбарик для наших типов объектов, которые будут грамотно создавать их.
Так и в жизни, мы не можем просто создать абонемент в спортзал. Абонемент создаётся и покупается разными способами, большим количеством действий.

Внутри объектов хранить такую логику - будет ошибкой разделения ответственности, а каждый раз создавать по новому будет не удобно 
+ будет тяжело создавать новые типы абониментов и развивать программу дальше.

Поэтому, для создания какого-то определённого типа объекта, используется фабрика этого объекта, в которой спрятаны все необходимые действия для создания этого объекта.
К тому же запомнив все определённые свойства, источники создания, экземпляр фабрики можно передавать дальше программе, что бы она без аргументов и прочей фигни 
порождала (или доставала из кэша, если захочет) новые объекты, если они ей требуются.

Полезно для: 
1. Вынеса логику создания из кода сложно создаваемых объектов, для которых есть какое-то разнообразие, какие-то общие схемы.
2. Для объединения создания таких объектов в одном месте, что бы когда пришлось менять какие-то общие свойства объекта, это было легко сделать, 
   т.к. есть единая точка в коде, где проходит их создание.
3. Для того, что бы коллеги основываясь на фабрике, легко добавляли новые типы в код/легко модифицирвоали старый
4. Для упрощения кода и оптимизации использования системных ресурсов. 
   Фабрика будет знать где искать свой тяжелый объект, что бы не создавать новый, а достать где нибудь из кэша.
   Если доставать не из фабрики - придётся каждый раз создавать какой-то новый код, который будет искать, вычислять то ли это, а если не то, создавать его.
5. Важно, что фабрика может сама оперделять тип объекта. который ей надо создать. 
   Это очень полезно, банально, для кросс-платформенных приложений, которые говорят фабрике - создай, и фабрика сама видит какой объект надо создать для текущей платформы.
   Так же экземпляр фабрики можно прокидывать дальше.

В кратце веткора развития, для которых нужна фабрика:
1) Надо будет опеределять тип объекта из разнообразия для текущей ситуации.
2) Создание/поиск объектов не является тривиальным.
3) Нужна возможность из единого места модернизировать логику создания объектов.
4) Нужно отдать коллегам простой способ создания объектов класса/написания новых типов, которые будут доступны из фабрики.

Как реализовать паттерн:
1. Привести объекты общего смысла под один интерфейс.
2. Создаётся абстрактная общая фабрика, которая будет иметь фабричный метод IType Create().
3. Выносим создание этих объектов в абстрактную фабрику и указываем параметры через аргументы.
4. Если кода слишком много от каких-то параметров, выносим из супер-фабрики в производные, создав их.