Абстрактная фабрика. Порождающий паттерн.
https://refactoring.guru/ru/design-patterns/abstract-factory

Паттерн говорит о абстрактной суперфабрике, которая выпускает более конкретные абстрактные суперфабрики.
Пример: 
Если для фабрчиного метода он был в выборе кросс-пдлатформенного диалогового компонента, то тут всё на уровень абстракции выше.
Тут мы выпускаем абстрактной фабрикой абстрактную фабрику для конкретной платформы.

Такая фабрика в отличии от фабрики для одного компонента (которая отдаст нам свой компонент для конкретной платформы), под собой имеет методы создания и других объектов,
таких как кнопки, текстовые поля, лейблы.
Такая фабрика нацелена на то, что бы выпускать фабрики для общего подкласса фабрик, ради удобства пользователя.

Например та же мебель. Есть тип дизайна и тип мебели. Мы хотим что бы каждый элемент разного дизайна имел свою фабрику, 
что бы мы могли работать с конкретной абстрактной фабрикой в коде, ничего о ней не зная.
Создаём викторианскую фабрику мебели -> пробрасываем под общим интерфейсом фабрики мебели -> и создаём себе мебель одного типа, 
не проверяя и не ищя конкретную для текущего типа дизайна.

В самом начале мы задаём конкретную для бизнес-логики (или ОС в примере) фабрику, и работаем с ней, каждый раз для элементов не перепроверяя что она для нужного типа.
У нас заранее глобально выбраны фабрики только одного типа.

Применяется, когда:
1) Приходят требования о том, что нужно поддерживать разные виды одних и тех же продуктов.
2) Когда уже готовых фабричных методов начинает не хватать, т.к. появились разные виды классов.
3) Если класс начинает иметь много фабричных методов, и мы видим что тенденция только в рост, то нужно выносить логику в отдельную иерархию, 
   что бы свыше решалось какой конкретный вид будет использоваться под этой логикой.