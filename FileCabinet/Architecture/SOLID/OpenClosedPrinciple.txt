https://metanit.com/sharp/patterns/5.2.php
# Поступай разумно, не надо делать супер-ультра гибкую архитектуру с миллионом сущностей, иначе читать её будет трудно

Open/Closed Principle (принцип открытости/закрытости)

! Сущности программы должны быть открыты для расширения, но закрыты для изменения.

То есть система должны быть построена в лучшем случае (для поддерживающих и для качества) таким образом, 
что бы при изменении программы мы только добавляли код, а не переписывали/изменяли существующий.


Пример из Metanit (вообще не очень красиво получилось, лучше бы был абстрактный повар с виртуальными готовыми рецептами, конкретный бы всегда что то мог своё привнести
                   и да, нарушен бы был принцип, но по крайней мере нет лишних абстракций и слова звучат логично. 
                   Тут смотря какого повара хотим, просто выполняющего жёсткие инструкции, или того кто попытается сделать по своему.
                   Сильно граничить могло бы, если бы требовалось иметь разные абстрактные меню, тогда лучше было бы сделать так как в примере всё таки
                   ):
Есть повар, что бы при добавлении ему новых блюд мы его не меняли, 
что бы не перемешивали логику инструкций и конкретных исполнителей - выносим в стратегию инструкции приготовления
```
Cook bob = new Cook("Bob");
bob.MakeDinner();

class Cook
{
    public string Name { get; set; }
    public Cook(string name)
    {
        this.Name = name;
    }
 
    public void MakeDinner()
    {
        Console.WriteLine("Чистим картошку");
        Console.WriteLine("Ставим почищенную картошку на огонь");
        Console.WriteLine("Сливаем остатки воды, разминаем варенный картофель в пюре");
        Console.WriteLine("Посыпаем пюре специями и зеленью");
        Console.WriteLine("Картофельное пюре готово");
    }
}
```


В итоге:
```
Cook bob = new Cook("Bob");
bob.MakeDinner(new PotatoMeal());
Console.WriteLine();
bob.MakeDinner(new SaladMeal());

class Cook
{
    public string Name { get; set; }
 
    public Cook(string name)
    {
        this.Name = name;
    }
 
    public void MakeDinner(IMeal meal)
    {
        meal.Make();
    }
}
 
interface IMeal
{
    void Make();
}
class PotatoMeal : IMeal
{
    public void Make()
    {
        Console.WriteLine("Чистим картошку");
        Console.WriteLine("Ставим почищенную картошку на огонь");
        Console.WriteLine("Сливаем остатки воды, разминаем варенный картофель в пюре");
        Console.WriteLine("Посыпаем пюре специями и зеленью");
        Console.WriteLine("Картофельное пюре готово");
    }
}
class SaladMeal : IMeal
{
    public void Make()
    {
        Console.WriteLine("Нарезаем помидоры и огурцы");
        Console.WriteLine("Посыпаем зеленью, солью и специями");
        Console.WriteLine("Поливаем подсолнечным маслом");
        Console.WriteLine("Салат готов");
    }
}
```