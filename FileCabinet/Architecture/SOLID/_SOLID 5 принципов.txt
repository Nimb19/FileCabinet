SOLID
https://www.youtube.com/watch?v=QFXiUo1Fao4
https://metanit.com/sharp/patterns/5.1.php

# Принципы SOLID - задают траекторию которой нужно следовать, что бы проще масштабировать и поддерживать код.

1. S = SRP (single responsibility) - принцип единой ответственности, то есть класс должен выполнять одну единствненую задачу 
   (как можно меньше ответственности это нормально с т.з. DDD)
2. O = OCP (open/closed principal Принцип открытости/закрытости) - поведение наследников не должно модифицировать логику предка, 
   но может расширять его функционал
3. L = LSP (принцип Барбары Лисков) - если интерфейс или базовый класс определяют какой-то контракт, 
   то реализующий класс не должен его нарушать.
   Если есть какой-то интерфейс и под него есть тест, то все реализующие объекты должны его проходить.
4. I = ISP - Клиенты не должны вынужденно зависеть от методов, которыми не пользуются. 
   Разделяйте интерфейсы, что бы не заставлять конкретный классы реализовывать то, что им не нужно.
   + Абстракции не должны зависеть от деталей, детали должны зависеть от абстракции.
   Например, атака не должна зависеть от игрока, потому что игрок сложный объект, в его детали погружаться не нужно.
   Достаточно сделать какой-нибудь интерфейс IDamagable, который повесить на класс игрока. 
   Если вам что то нужно, то попросите то что вам нужно, не надо просить весь тип.
   ! то есть не должны зависеть от типов, которые дают нам слишком много возможностей.
5. D = DIP - Принцип инверсии зависимостей. Банальное разделение зависимостей - не нужно зацеплятся с тем, чем не нужно. 
   Прокидывай то что надо извне.