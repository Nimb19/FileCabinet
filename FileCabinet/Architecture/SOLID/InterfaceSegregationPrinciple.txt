https://metanit.com/sharp/patterns/5.4.php
# Поступай разумно, не надо делать супер-ультра гибкую архитектуру с миллионом сущностей, иначе читать её будет трудно

Interface Segregation Principle (принцип разделения интерфейсов)

! Клиенты не должны вынужденно зависеть от методов, которыми не пользуются.

Говорит сам за себя, большие интерфейсы, по которым мб видно, что они решают несколько задач. Наследникам придётся реализовывать все методы, даже которые идейно не нужны, 
или их он захочет впринципе вынести в стратегию, вот тут начнётся говнокод.

Техники что бы распознать нарушение:
1) Слишком большие интерфейсы (перекликается с логикой, виноват тот кто создавал его)
2) Компоненты в интерфейсах слабо связаны (перекликается с SRP, виноват тот кто создавал его)
3) Вынужденные методы без реализации (перекликается с LSP, виноват фактически наследник)

Эти проблемы бывают в частном случае от фигового интерфейса.
ISP решает эту проблему, при написании интерфейсов мы так же рубим возможные вынужденные косяки выше.



Пример:
Есть интерфейс сообщения с методом его отправки
```
interface IMessage
{
    void Send();
    string Text { get; set;}
    string Subject { get; set;}
    string ToAddress { get; set; }
    string FromAddress { get; set; }
}
```

SRP нарушен - отправка и сообщение это разные вещи.
1. Есть несколько способов отправить сообщение, которые хорошо было бы вынести в отдельный интерфейс.
2. Мы обязуем хранить адреса как для конкретного случая с Email сообщением, но ведь у конкретной реализации мессенджера может отсутствовать какое-то поле.

Теперь мы хотим добавить способ отправки сообщения по Sms, нам придётся выбрасывать ошибку для get;set; Subject, это нарушение LSP.
Не дай бог мы изменим структуру до отправки VoiceMessage. Что тогда?
Наследникам придётся реализовывать бесполезные ненужные свойства, это нарушение ISP и LSP.

Для решения выделим общее для IMessage, разбитое вынесем в новые более конкретные интерфейсы

```
interface IMessage
{
    void Send();
    string ToAddress { get; set; }
    string FromAddress { get; set; }
}
interface IVoiceMessage : IMessage
{
    byte[] Voice { get; set; }
}
interface ITextMessage : IMessage
{
    string Text { get; set; }
}
 
interface IEmailMessage : ITextMessage
{
    string Subject { get; set; }
}
 
class VoiceMessage : IVoiceMessage
{
    public string ToAddress { get; set; } = "";
    public string FromAddress { get; set; } = "";
 
    public byte[] Voice { get; set; } = Array.Empty<byte>(); 
    public void Send() => Console.WriteLine("Передача голосовой почты");
}
class EmailMessage : IEmailMessage
{
    public string Text { get; set; } = "";
    public string Subject { get; set; } = "";
    public string FromAddress { get; set; } = "";
    public string ToAddress { get; set; } = "";
 
    public void Send() => Console.WriteLine("Отправляем по Email сообщение: {Text}");
}
 
class SmsMessage : ITextMessage
{
    public string Text { get; set; } = "";
    public string FromAddress { get; set; } = "";
    public string ToAddress { get; set; } = "";
    public void Send() => Console.WriteLine("Отправляем по Sms сообщение: {Text}");
}
```



То же самое с телефонами, не все телефоны умеют и фотографировать, и заходить в веб-браузер.
В итоге абстрактно телефон можно передать фотографу, где тот выбросит ошибку, если телефон не реализовывал метод на самом деле и нарушал LSP из-за ISP.
```
interface IPhone
{
    void Call();
    void TakePhoto();
    void MakeVideo();
    void BrowseInternet();
}
class Phone : IPhone
{
    public void Call() => Console.WriteLine("Звоним");
     
    public void TakePhoto() => Console.WriteLine("Фотографируем");
     
    public void MakeVideo() => Console.WriteLine("Снимаем видео");
     
    public void BrowseInternet() => Console.WriteLine("Серфим в интернете");
}
class Photograph
{
    public void TakePhoto(Phone phone)
    {
        phone.TakePhoto();
    }
}
```
