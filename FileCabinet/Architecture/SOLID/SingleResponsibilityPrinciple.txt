https://metanit.com/sharp/patterns/5.1.php
# Поступай разумно, не надо делать супер-ультра гибкую архитектуру с миллионом сущностей, иначе читать её будет трудно

Single Responsibility Principle (принцип единой ответственности)

! Каждый компонент должен иметь только одну причину для изменения...

Суть в том, что класс/структура/метод должны выполнять одну единственную задачу, написанную в названии. 
Весь функционал будет обладать высокой связанностью.

Если класс для простоты реализовывал несколько задач, что было разумно в какой то момент допустим, что бы не плодить херни когда это не нужно, 
но развивать класс стало быть нужно, то - выносим задачу в отдельный класс, который подтянем ассоциацией. 

Как применять:
1) Общие платформенные библиотеки лучше всегда делать архитектурно очень правильно, потому что если в будущем придётся добавлять функциональность,
   то лучше бы это делать на общих интерфейсах на всём готовом. В таких библиотеках больше важна архитектурная составляющая, чем то что сущностей будет многовато для первых этапов.
   Так как делать их будут понимающие ребята, и архитектура явна будет где то описана подробно.
2) Но в более примитивных библиотеках хорошо было бы конечно попроще, если это позволяет задача.