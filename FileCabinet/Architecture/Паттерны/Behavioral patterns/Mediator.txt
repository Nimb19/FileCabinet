Поведенческий паттерн Mediator (с англ. посредник) (так же Director, Дирижёр (координирует коллег)). Относится к взаимоотношению объектов системы.
https://metanit.com/sharp/patterns/3.9.php

Нужен если:
(Попроще, к примеру - хотим избавить клиента нашей библиотеки от знания внутренней кухни - добавляем менеджера посредника, обучаем что бы понимал как ему и на что реагировать)
Мы не хотим иметь какие-то сильные связи между объектами, хотим упростить логику взаимоотношений объектов. 
Если хотим без хранения в голове одной и той же логики (проверка кода правильно ли описал очередные взаимоотношения), то закуём её в объект, и назовём посредник.

Пример:
Заказчики не общаются напрямую с программистами, мы избавляем их от знаний внутренней кухни нашей системы, от знаний тестеров, программистов, документалистов лично.
Вместо этого даём один объект посредник, который закуёт в себе логику взаимодействия и сам будет передавать что нужно кому нужно.
(Если внутри кода пример - диалоговое окно. Обработчик поля ввода хотим избавить от знаний о других виджетах. 
Если поле ввода стало пустым - и хотим сделать кнопку недоступной для нажатия. Что бы текстбокс не хранил логику взаимодействия - он говорит посреднику что поле стало пустым, а посредник закрывает кнопку)

То есть:
Если мы хотим что бы что либо не лезло в нашу систему и хотим скрыть детали реализации от других объектов/систем, то реализуем менеджера посредника. 
Одного его нужно будет знать другим что бы работать вместе.
Обмен сообщениями без зависимостей.


# MediatR - не является реализатором шаблона Посредник. Это диспетчер команд (The Command Dispatcher Pattern)
https://stackoverflow.com/questions/57963474/what-are-the-differences-between-the-command-dispatcher-and-mediator-design-patt
