1. Замыкание - это функция которая использует переменные в окружении, хотя они явно не передаются и не хранятся в функции. Но она всё ещё имеет к ним ПРЯМОЙ доступ.
   https://metanit.com/sharp/tutorial/3.54.php
   Наверное, смысл названия в том, что функция замкнута в своём окружении. 
   Вот мы и использовали замыкание окружающих локальных переменных, что бы управлять ими извне их видимости.
2. Переопределение виртуальных элементов из дочерних классах работает в конструкторе базового класса, то есть он увидит переопределённый абстрактный/виртуальный элемент.
   Однако, если абстрактный элемент который будет переопределён в производном классе, будет использовать какую-то из свежих переменных, то он получит из неё нулл, т.к. конструктор
   производного ещё не успеет отработать и проинициализировать новую переменную.
   
   А ключ. слово new (подсказка студии, на самом деле он не нужен, только для уточнения создан) перезапишет, но не переопределит наследственный элемент.
   То есть, если он будет приведён к родительскому, то родительский тип не увидит то что дочерний что то переопределял и вызовет свою реализацию.
   Upcast для абстрактных элементов
   https://www.youtube.com/watch?v=lylrXB9EJqs&list=PLEtg-LdqEKXaN_NkvJkxD460DE-zy7dfg&index=6
3. Ключ. слово abstract можно применять для классов, методов, свойств, индексаторов и событий.
   https://learn.microsoft.com/ru-ru/dotnet/csharp/language-reference/keywords/abstract
4. Утиная типизация у foreach 
   https://www.youtube.com/watch?v=NYovSIHh5d0&list=PLEtg-LdqEKXaN_NkvJkxD460DE-zy7dfg&index=8
5. Можно прерывать асинхронную операцию по таймауту с поры .NET 6.0 с помощью: await MethodAsync().WaitAsync(TimeSpan); // выбросит TimeoutException
